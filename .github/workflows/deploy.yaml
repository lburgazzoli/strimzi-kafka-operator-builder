name: Build and Deploy Strimzi images

on:
  workflow_call:
    inputs:
      repo:
        required: true
        type: string
      branch:
        required: true
        type: string
    secrets:
      quay-username:
        required: true
      quay-token:
        required: true
      quay-repo:
        required: true
      quay-org:
        required: true

env:
  LANG: en_US.UTF-8
  MAVEN_OPTS: -Xmx3000m
  MAVEN_ARGS: -V -ntp -Dhttp.keepAlive=false -e

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout ${{ inputs.repo }}
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repo }}
          ref: ${{ inputs.branch }}

      - name: SetUp JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom-*.xml') }}
          restore-keys: ${{ runner.os }}-m2-
      
      - name: Set up Minikube
        uses: manusa/actions-setup-minikube@v2.7.2
        with:
          minikube version: 'v1.29.0'
          kubernetes version: 'v1.25.4'
          driver: 'docker'

      - name: Replace API group
        run: |
          sed -i "s/kafka.strimzi.io/strimzi.rhoc.bf2.dev/g" api/src/main/java/io/strimzi/api/kafka/model/Constants.java
          sed -i "s/core.strimzi.io/core.strimzi.rhoc.bf2.dev/g" api/src/main/java/io/strimzi/api/kafka/model/Constants.java

          yq -i '.rules[1].apiGroups[0] = "strimzi.rhoc.bf2.dev"' packaging/install/cluster-operator/023-ClusterRole-strimzi-cluster-operator-role.yaml
          yq -i '.rules[2].apiGroups[0] = "core.strimzi.rhoc.bf2.dev"' packaging/install/cluster-operator/023-ClusterRole-strimzi-cluster-operator-role.yaml
          yq -i '.rules[0].apiGroups[0] = "strimzi.rhoc.bf2.dev"' packaging/install/cluster-operator/031-ClusterRole-strimzi-entity-operator.yaml

          for F in api/src/test/resources/io/strimzi/api/kafka/model/*.yaml; do
              if [ $(yq e '.apiVersion == "kafka.strimzi.io/v1alpha1"' "${F}") == "true" ]; then
                  yq -i '.apiVersion = "strimzi.rhoc.bf2.dev/v1alpha1"' "${F}"
              fi 
              if [ $(yq e '.apiVersion == "kafka.strimzi.io/v1beta1"' "${F}") == "true" ]; then
                  yq -i '.apiVersion = "strimzi.rhoc.bf2.dev/v1beta1"' "${F}"
              fi
              if [ $(yq e '.apiVersion == "kafka.strimzi.io/v1beta2"' "${F}") == "true" ]; then
                  yq -i '.apiVersion = "strimzi.rhoc.bf2.dev/v1beta2"' "${F}"
              fi
              if [ $(yq e '.apiVersion == "core.strimzi.io/v1beta2"' "${F}") == "true" ]; then
                  yq -i '.apiVersion = "core.strimzi.rhoc.bf2.dev/v1beta2"' "${F}"
              fi
          done

      - name: Build
        run: |
          export TEST_CLUSTER=minikube
          export MVN_ARGS='-Dsurefire.excludes="io.strimzi.api.kafka.model.*Test.java"'

          make all

      # - name: Login to Quay.io
      #   uses: docker/login-action@v1
      #   with:
      #     registry: quay.io
      #     username: ${{ secrets.quay-username }}
      #     password: ${{ secrets.quay-token }}

      # - name: Global Env
      #   env:
      #     QUAY_REPO: ${{ secrets.quay-repo }}
      #     QUAY_USER: ${{ secrets.quay-org }}
      #   run: |
      #     IMAGE_TAG="$(make get-version)-$(git rev-parse --short HEAD)"
      #     IMAGE_NAME=quay.io/${QUAY_USER}/${QUAY_REPO}

      #     echo "Using IMAGE_TAG=$IMAGE_TAG"
      #     echo "Using IMAGE_NAME=$IMAGE_NAME"

      #     echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
      #     echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      # - name: Codegen
      #   run: |
      #     make VERSION=${{ env.IMAGE_TAG }} IMAGE_NAME=${{ env.IMAGE_NAME }} codegen set-version build-resources
      # - name: Build
      #   run: |
      #     make VERSION=${{ env.IMAGE_TAG }} IMAGE_NAME=${{ env.IMAGE_NAME }} clean codegen set-module-version set-version build-resources build images images-push
      #     cp kamel kamel-${{ env.IMAGE_TAG }}
      # - name: Bundle
      #   run: |
      #     make VERSION=${{ env.IMAGE_TAG }} IMAGE_NAME=${{ env.IMAGE_NAME }} bundle
      #     tar -cvzf  kamel-bundle-${{ env.IMAGE_TAG }}.tar.gz ./bundle

      # - name: Push Dev Tag
      #   run: |
      #     docker tag ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${{ env.IMAGE_NAME }}:${{ inputs.branch }}
      #     docker push ${{ env.IMAGE_NAME }}:${{ inputs.branch }}

      # - name: Upload Camel K CLI
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: kamel-${{ env.IMAGE_TAG }}
      #     path: ./kamel
      #     retention-days: 5

      # - name: Add Camel K Release
      #   uses: "marvinpinto/action-automatic-releases@latest"
      #   with:
      #     repo_token: "${{ secrets.GITHUB_TOKEN }}"
      #     prerelease: true
      #     automatic_release_tag: ${{ env.IMAGE_TAG }}
      #     title: "${{ env.IMAGE_TAG }}"
      #     files: |
      #       kamel-${{ env.IMAGE_TAG }}
      #       kamel-bundle-${{ env.IMAGE_TAG }}.tar.gz